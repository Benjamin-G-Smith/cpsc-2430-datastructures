// Ben Smth
// P6.cpp
// 11/24/2017

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <vector>

using namespace std;

void initalize(vector<int>& storage, int size);
bool removePrimeParity(vector<int>& storage, int size);
bool removeNonPrimeParity(vector<int>& storage, int size);
bool checkPrime(int value);

int main()
{
  srand(time(0));
  vector<int> storage;
  vector<int>::iterator element;
  const int size = 300;
  initalize(storage, size);
  for(element = storage.begin(); element < storage.end(); element++){
    cout << *element << " ";
  }
  cout << endl;
  bool done = false;
  int itemsRemoved = 0;
  while(!done){
    bool primeClean = removePrimeParity(storage, size);
    bool nonPrimeClean = removeNonPrimeParity(storage, size);
    if(primeClean && nonPrimeClean){
      done = true;
    }
    itemsRemoved++;
  }
  for(element = storage.begin(); element < storage.end(); element++){
    cout << *element << " ";
  }
  cout << endl;
  cout << itemsRemoved << endl;

  return 0;
}
bool checkPrime(int data)
{
  if(data == 2){
    return true;
  }
  else if(data > 3 && data % 2 != 0){
      for(int i = 3; i < data; i++){
          if(data % i == 0){
              return false;
          }
        }
        return true;
    }
    return false;
}
bool checkNonPrime(int data){
  if(data == 1){
    return true;
  }
  else if(data > 3 && data % 2 == 0){
        return true;
    }
    return false;
}
bool removeNonPrimeParity(vector<int>& storage, int size){
  int firstVal = 0;
  int thirdVal = 0;
  int delIndex = 0;
  for(int i = 0; i < (int) storage.size()-1; i += 3){
    firstVal = storage[i];
    thirdVal = storage[i+2];
    if((checkNonPrime(firstVal) && checkNonPrime(thirdVal))){
      delIndex = i+1;
      cout <<"First "<< firstVal <<" Third " << thirdVal << " i's " << i << endl;
      //cin.get();
      storage.erase(storage.begin() + delIndex);
      return false;
    }
  }
  return true;
}
bool removePrimeParity(vector<int>& storage, int size){
  int firstVal = 0;
  int thirdVal = 0;
  int delIndex = 0;
  for(int i = 0; i < (int) storage.size()-1; i += 3){
    firstVal = storage[i];
    thirdVal = storage[i+2];
    if(checkPrime(firstVal) && checkPrime(thirdVal)){
      delIndex = i+1;
      cout <<"First "<< firstVal <<" Third " << thirdVal << " i's " << i << endl;
      //      cin.get();
      storage.erase(storage.begin() + delIndex);
      //storage.shrink_to_fit();
      return false;
    }
  }
  return true;
}
void initalize(vector<int>& storage, int size)
{
  int randNum = 0;
  for(int i = 0; i < size; i++){
    randNum = rand() % 100 + 1;
    if(randNum % 5 != 0){
      storage.push_back(randNum);
    }
  }
}
